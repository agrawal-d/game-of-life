{"version":3,"sources":["interestingShapes.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","generation","setGeneration","baseDim","setBaseDim","isPaused","setIsPaused","totalTime","setTotalTime","updateSpeed","setUpdateSpeed","x","y","gridSize","setGridSize","cellColor","setCellColor","totalAlive","setTotalAlive","processTime","setProcessTime","Array","fill","map","grid","setGrid","useEffect","window","screen","availWidth","handleCellClick","useCallback","newGrid","resetGrid","generationTimer","setInterval","init","Date","now","newTotalAlive","numNeighbours","console","log","end","processGeneration","clearInterval","cellDim","renderedGrid","count","renderedRow","cell","currentCount","push","className","key","style","width","height","backgroundColor","onClick","type","value","onChange","e","target","parseInt","min","Math","max","href","src","shapes","alt","maxWidth","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,+C,uMCkN5BC,MA9Mf,WAAiB,IAAD,EACsBC,mBAAS,GAD/B,mBACPC,EADO,KACKC,EADL,OAEgBF,mBAAS,KAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGkBJ,oBAAS,GAH3B,mBAGPK,EAHO,KAGGC,EAHH,OAIoBN,mBAAS,GAJ7B,mBAIPO,EAJO,KAIIC,EAJJ,OAKwBR,mBAAS,KALjC,mBAKPS,EALO,KAKMC,EALN,OAMkBV,mBAAS,CAAEW,EAAG,GAAIC,EAAG,KANvC,mBAMPC,EANO,KAMGC,EANH,OAOoBd,mBAAS,WAP7B,mBAOPe,EAPO,KAOIC,EAPJ,OAQsBhB,mBAAS,GAR/B,mBAQPiB,EARO,KAQKC,EARL,OASwBlB,mBAAS,GATjC,mBASPmB,EATO,KASMC,EATN,OAUUpB,mBACtB,IAAIqB,MAAM,IAAIC,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAM,IAAIC,MAAK,OAXvC,mBAUPE,EAVO,KAUDC,EAVC,KAcdC,qBAAU,WACJC,OAAOC,OAAOC,WAAa,KAC7BzB,EAAWuB,OAAOC,OAAOC,WAAa,OAEvC,IAEH,IAAMC,EAAkBC,uBAAY,SAACpB,EAAGC,GACtC,IAAMoB,EAAO,YAAOR,GACpBQ,EAAQrB,GAAGC,IAAMY,EAAKb,GAAGC,GACzBM,EAAcD,GAAcO,EAAKb,GAAGC,GAAK,GAAK,IAC9Ca,EAAQO,KACP,CAACf,EAAYO,IAEVS,EAAYF,uBAAY,WAC5B,IAAMC,EAAU,IAAIX,MAAMR,EAASF,GAAGW,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMR,EAASD,GAAGU,MAAK,MACnFG,EAAQO,KACP,CAACnB,IAEJa,qBAAU,WACR,IAyDIQ,EAQJ,OAPK7B,IACH6B,EAAkBC,aAAY,YA3DN,WAIxB,IAHA,IAAMC,EAAOC,KAAKC,MACdC,EAAgB,EACdP,EAAU,IAAIX,MAAMR,EAASF,GAAGW,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMR,EAASD,GAAGU,MAAK,MAC1EX,EAAI,EAAGA,EAAIE,EAASF,EAAGA,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAASD,EAAGA,IAC9BoB,EAAQrB,GAAGC,GAAKY,EAAKb,GAAGC,GAG5B,IAAK,IAAID,EAAI,EAAGA,EAAIE,EAASF,EAAGA,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAASD,EAAGA,IAAK,CACnC,IAAI4B,EAAgB,EAChB7B,EAAI,GAAK,IACX6B,GAAkC,EAAjBhB,EAAKb,EAAI,GAAGC,IAE3BA,EAAI,GAAK,IACX4B,GAAkC,EAAjBhB,EAAKb,GAAGC,EAAI,IAE3BD,EAAI,EAAIE,EAASF,IACnB6B,GAAkC,EAAjBhB,EAAKb,EAAI,GAAGC,IAE3BA,EAAI,EAAIC,EAASD,IACnB4B,GAAkC,EAAjBhB,EAAKb,GAAGC,EAAI,IAE3BD,EAAI,GAAK,GAAKC,EAAI,GAAK,IACzB4B,GAAsC,EAArBhB,EAAKb,EAAI,GAAGC,EAAI,IAE/BD,EAAI,GAAK,GAAKC,EAAI,EAAIC,EAASD,IACjC4B,GAAsC,EAArBhB,EAAKb,EAAI,GAAGC,EAAI,IAE/BD,EAAI,EAAIE,EAASF,GAAKC,EAAI,GAAK,IACjC4B,GAAsC,EAArBhB,EAAKb,EAAI,GAAGC,EAAI,IAE/BD,EAAI,EAAIE,EAASF,GAAKC,EAAI,EAAIC,EAASD,IACzC4B,GAAsC,EAArBhB,EAAKb,EAAI,GAAGC,EAAI,IAEzB,IAAND,GAAiB,IAANC,GACb6B,QAAQC,IAAIlB,EAAKb,GAAGC,GAAI4B,KAEtBhB,EAAKb,GAAGC,IAAyB,IAAlB4B,GAAyC,IAAlBA,KAG9BhB,EAAKb,GAAGC,IAAwB,IAAlB4B,GAKxBR,EAAQrB,GAAGC,IAAK,GAPhBoB,EAAQrB,GAAGC,IAAK,EAChB2B,KAUNd,EAAQO,GACRd,EAAcqB,GACd,IAAMI,EAAMN,KAAKC,MACjBlB,EAAeuB,EAAMP,GAMnBQ,GACA1C,EAAcD,EAAa,GAC3BO,EAAaD,EAAYE,KACxBA,IAEE,WACLoC,cAAcX,MAEf,CAACjC,EAAYuB,EAAMX,EAASF,EAAGE,EAASD,EAAGP,EAAUE,EAAWE,IAInE,IAFA,IAAMqC,EAAU3C,EAAUU,EAASF,EAC7BoC,EAAe,GAxGP,WAyGLpC,GACP,IA1GY,EA0GRqC,EAAQ,EACNC,EAAc,GA3GR,cA4GOzB,EAAKb,IA5GZ,yBA4GDuC,EA5GC,QA6GJC,EAAeH,EACjBE,EACFD,EAAYG,KAAK,yBAAKC,UAAU,kBAAkBC,IAAK,OAAS3C,EAAIwC,EAAcI,MAAO,CAAEC,MAAOV,EAAU,KAAMW,OAAQX,EAAU,KAAMY,gBAAiB3C,GAAa4C,QAAS,WAAQ7B,EAAgBnB,EAAGwC,OAE5MF,EAAYG,KAAK,yBAAKC,UAAU,iBAAiBC,IAAK,OAAS3C,EAAIwC,EAAcI,MAAO,CAAEC,MAAOV,EAAU,KAAMW,OAAQX,EAAU,MAAQa,QAAS,WAAQ7B,EAAgBnB,EAAGwC,OAEjLH,KAPF,2BAA6B,IA5GjB,8BAqHZD,EAAaK,KAAK,yBAAKC,UAAU,WAAWC,IAAK,MAAQ3C,EAAG4C,MAAO,CAAEE,OAAQX,EAAU,OAASG,KAZzFtC,EAAI,EAAGA,EAAIE,EAASF,EAAGA,IAAM,EAA7BA,GA6CT,OACE,yBAAK0C,UAAU,aACb,qDAEA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OAAOE,MAAO,CAAEC,MAAOrD,EAAU,OAC9C,yBAAKkD,UAAU,aAAaN,KAIhC,yBAAKM,UAAU,YACb,wCACA,kCACE,oDACA,0CACA,4BAAQM,QAzCI,WAClBrD,GAAaD,KAwCwBA,EAAW,eAAY,gBACtD,+CACA,2BAAOuD,KAAK,QAAQC,MAAO9C,EAAW+C,SA/C1B,SAACC,GACnB/C,EAAa+C,EAAEC,OAAOH,UA+ChB,gDACA,2BAAOA,MAAOpD,EAAamD,KAAK,SAASE,SArCvB,SAACC,GACzBrD,EAAeuD,SAASF,EAAEC,OAAOH,QAAU,MAqCrC,2DACA,2BAAOA,MAAO1D,EAASyD,KAAK,SAASE,SA3CtB,SAACC,GACtB3D,EAAW6D,SAASF,EAAEC,OAAOH,QAAU,MA0C8BK,IAAK,KAEtE,kCACE,iDACA,uBAAGb,UAAU,QAAb,4DACA,uBAAGA,UAAU,QAAb,gHAEA,8CACA,2BAAOA,UAAU,MAAMQ,MAAOhD,EAASF,EAAGiD,KAAK,SAASE,SA3C5C,SAACC,GACnB,IAAMpD,EAAIwD,KAAKC,IAAIH,SAASF,EAAEC,OAAOH,OAAQ,IAAM,EAC7C7B,EAAU,IAAIX,MAAMV,GAAGW,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMV,GAAGW,MAAK,MACjEG,EAAQO,GACRlB,EAAY,CAAEF,EAAGD,EAAGA,EAAGA,OAiCnB,OAQE,2BAAQ0C,UAAU,MAAMQ,MAAOhD,EAASD,EAAGgD,KAAK,SAASE,SAtC7C,SAACC,GACnB,IAAMnD,EAAIuD,KAAKC,IAAIH,SAASF,EAAEC,OAAOH,OAAQ,IAAM,EAC7C7B,EAAU,IAAIX,MAAMT,GAAGU,KAAK,GAAGC,KAAI,kBAAM,IAAIF,MAAMT,GAAGU,MAAK,MACjEG,EAAQO,GACRlB,EAAY,CAAEH,EAAGC,EAAGA,EAAGA,OAmCjB,0CACA,4BAAQ+C,QAAS1B,GAAjB,UAEF,4CAAiB,uBAAGoC,KAAK,wBAAR,eAEnB,yBAAKhB,UAAU,aACf,yBAAKA,UAAU,SACb,qCACA,gDAAsBpD,GACtB,6CAAmBM,EAAY,IAA/B,KACA,+DAAqCY,EAArC,MAEA,2CAAiBN,EAASF,EAAIE,EAASD,GACvC,iDAAuBK,GACvB,gDAAsBJ,EAASF,EAAIE,EAASD,EAAIK,GAChD,wDAA6B,uBAAGoD,KAAK,yDAAR,0DAE7B,kDACA,yBAAKC,IAAKC,IAAQC,IAAI,qBAAqBjB,MAAO,CAAEC,MAAO,OAAQiB,SAAU,cChMjEC,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.8b367a60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/interestingShapes.da5ab795.png\";","import React, { useState, useEffect, useCallback } from 'react'\nimport './App.css'\nimport shapes from './interestingShapes.png'\n\nfunction App () {\n  const [generation, setGeneration] = useState(0)\n  const [baseDim, setBaseDim] = useState(700)\n  const [isPaused, setIsPaused] = useState(false)\n  const [totalTime, setTotalTime] = useState(0)\n  const [updateSpeed, setUpdateSpeed] = useState(1000)\n  const [gridSize, setGridSize] = useState({ x: 10, y: 10 })\n  const [cellColor, setCellColor] = useState('#7ADC1D')\n  const [totalAlive, setTotalAlive] = useState(0)\n  const [processTime, setProcessTime] = useState(0)\n  const [grid, setGrid] = useState(\n    new Array(10).fill(0).map(() => new Array(10).fill(false))\n  )\n\n  useEffect(() => {\n    if (window.screen.availWidth < 800) {\n      setBaseDim(window.screen.availWidth - 100)\n    }\n  }, [])\n\n  const handleCellClick = useCallback((x, y) => {\n    const newGrid = [...grid]\n    newGrid[x][y] = !grid[x][y]\n    setTotalAlive(totalAlive + (grid[x][y] ? 1 : -1))\n    setGrid(newGrid)\n  }, [totalAlive, grid])\n\n  const resetGrid = useCallback(() => {\n    const newGrid = new Array(gridSize.x).fill(0).map(() => new Array(gridSize.y).fill(false))\n    setGrid(newGrid)\n  }, [gridSize])\n\n  useEffect(() => {\n    const processGeneration = () => {\n      const init = Date.now()\n      let newTotalAlive = 0\n      const newGrid = new Array(gridSize.x).fill(0).map(() => new Array(gridSize.y).fill(false))\n      for (let x = 0; x < gridSize.x; x++) {\n        for (let y = 0; y < gridSize.y; y++) {\n          newGrid[x][y] = grid[x][y]\n        }\n      }\n      for (let x = 0; x < gridSize.x; x++) {\n        for (let y = 0; y < gridSize.y; y++) {\n          let numNeighbours = 0\n          if (x - 1 >= 0) {\n            numNeighbours += grid[x - 1][y] | 0\n          }\n          if (y - 1 >= 0) {\n            numNeighbours += grid[x][y - 1] | 0\n          }\n          if (x + 1 < gridSize.x) {\n            numNeighbours += grid[x + 1][y] | 0\n          }\n          if (y + 1 < gridSize.y) {\n            numNeighbours += grid[x][y + 1] | 0\n          }\n          if (x - 1 >= 0 && y - 1 >= 0) {\n            numNeighbours += grid[x - 1][y - 1] | 0\n          }\n          if (x - 1 >= 0 && y + 1 < gridSize.y) {\n            numNeighbours += grid[x - 1][y + 1] | 0\n          }\n          if (x + 1 < gridSize.x && y - 1 >= 0) {\n            numNeighbours += grid[x + 1][y - 1] | 0\n          }\n          if (x + 1 < gridSize.x && y + 1 < gridSize.y) {\n            numNeighbours += grid[x + 1][y + 1] | 0\n          }\n          if (x === 1 && y === 0) {\n            console.log(grid[x][y], numNeighbours)\n          }\n          if (grid[x][y] && (numNeighbours === 2 || numNeighbours === 3)) {\n            newGrid[x][y] = true\n            newTotalAlive++\n          } else if (!grid[x][y] && numNeighbours === 3) {\n            newGrid[x][y] = true\n            newTotalAlive++\n          } else {\n            // console.log('cell ', x, y, 'died as it has', numNeighbours, 'neighbours')\n            newGrid[x][y] = false\n          }\n        }\n      }\n      setGrid(newGrid)\n      setTotalAlive(newTotalAlive)\n      const end = Date.now()\n      setProcessTime(end - init)\n    }\n\n    let generationTimer\n    if (!isPaused) {\n      generationTimer = setInterval(() => {\n        processGeneration()\n        setGeneration(generation + 1)\n        setTotalTime(totalTime + updateSpeed)\n      }, updateSpeed)\n    }\n    return () => {\n      clearInterval(generationTimer)\n    }\n  }, [generation, grid, gridSize.x, gridSize.y, isPaused, totalTime, updateSpeed])\n\n  const cellDim = baseDim / gridSize.x\n  const renderedGrid = []\n  for (let x = 0; x < gridSize.x; x++) {\n    let count = 0\n    const renderedRow = []\n    for (const cell of grid[x]) {\n      const currentCount = count\n      if (cell) {\n        renderedRow.push(<div className=\"cell cell-alive\" key={'cell' + x + currentCount} style={{ width: cellDim + 'px', height: cellDim + 'px', backgroundColor: cellColor }} onClick={() => { handleCellClick(x, currentCount) }}></div>)\n      } else {\n        renderedRow.push(<div className=\"cell cell-dead\" key={'cell' + x + currentCount} style={{ width: cellDim + 'px', height: cellDim + 'px' }} onClick={() => { handleCellClick(x, currentCount) }}></div>)\n      }\n      count++\n    }\n    renderedGrid.push(<div className=\"cell-row\" key={'row' + x} style={{ height: cellDim + 'px' }}>{renderedRow}</div>)\n  }\n\n  const handleColor = (e) => {\n    setCellColor(e.target.value)\n  }\n\n  const handlePause = () => {\n    setIsPaused(!isPaused)\n  }\n\n  const handleGridSize = (e) => {\n    setBaseDim(parseInt(e.target.value) || 100)\n  }\n\n  const handleUpdateSpeed = (e) => {\n    setUpdateSpeed(parseInt(e.target.value) || 1)\n  }\n\n  const handleGridX = (e) => {\n    const x = Math.max(parseInt(e.target.value), 1) || 1\n    const newGrid = new Array(x).fill(0).map(() => new Array(x).fill(false))\n    setGrid(newGrid)\n    setGridSize({ y: x, x: x })\n  }\n\n  const handleGridY = (e) => {\n    const y = Math.max(parseInt(e.target.value), 1) || 1\n    const newGrid = new Array(y).fill(0).map(() => new Array(y).fill(false))\n    setGrid(newGrid)\n    setGridSize({ x: y, y: y })\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Conway&apos;s Game of Life</h1>\n\n      <div className=\"app\">\n        <div className=\"game\" style={{ width: baseDim + 'px' }}>\n          <div className=\"cell-grid\">{renderedGrid}</div>\n        </div>\n      </div>\n\n      <div className=\"settings\">\n        <h2>Settings</h2>\n        <fieldset>\n          <legend>General settings</legend>\n          <p>Toggle game</p>\n          <button onClick={handlePause}>{isPaused ? '▶ Start' : '■  Stop'}</button>\n          <p>Alive cell color</p>\n          <input type=\"color\" value={cellColor} onChange={handleColor} />\n          <p>Update speed (ms)</p>\n          <input value={updateSpeed} type=\"number\" onChange={handleUpdateSpeed} />\n          <p>Grid display dimensions (px)</p>\n          <input value={baseDim} type=\"number\" onChange={handleGridSize} min={1} />\n        </fieldset>\n        <fieldset>\n          <legend>Base settings</legend>\n          <p className=\"warn\">Warning: Changing the base settings will reset the grid.</p>\n          <p className=\"warn\">Warning: Large grid sizes can cause the app to become unresponsive. Sizes smaller than 100&times;100 are safer.</p>\n\n          <p>Grid Dimensions</p>\n          <input className=\"dim\" value={gridSize.x} type=\"number\" onChange={handleGridX} />\n          &times;\n          < input className=\"dim\" value={gridSize.y} type=\"number\" onChange={handleGridY} />\n          <p>Reset cells</p>\n          <button onClick={resetGrid}>Reset</button>\n        </fieldset>\n        <p>Created by By <a href=\"agrawal-d.github.io/\">agrawal-d</a></p>\n      </div>\n      <div className=\"clearfix\"></div>\n      <div className=\"stats\">\n        <h2>Stats</h2>\n        <p>Generation count: {generation}</p>\n        <p>Total Runtime: {totalTime / 1000}s</p>\n        <p>Last generation processing time: {processTime}ms</p>\n\n        <p>Total cells: {gridSize.x * gridSize.y}</p>\n        <p>Total alive cells: {totalAlive}</p>\n        <p>Total dead cells: {gridSize.x * gridSize.y - totalAlive}</p>\n        <p>For more information, see <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life</a></p>\n\n        <h2>Interesting Shapes</h2>\n        <img src={shapes} alt=\"Interesting shapes\" style={{ width: '100%', maxWidth: '500px' }} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}